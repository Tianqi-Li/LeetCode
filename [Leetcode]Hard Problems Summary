//[Leetcode]Hard Problems Summary
#1 LRU Cache
//HashMap  Double-Linked List  Separate the functions
public class LRUCache {
    public DoubleLinkedList head;
    public DoubleLinkedList end;
    private HashMap<Integer, DoubleLinkedList> map;
    public int size;
    public int capacity;
    
    public LRUCache(int capacity) {
        map = new HashMap<Integer, DoubleLinkedList>();
        this.capacity = capacity;
        size = 0;
    }
    
    public int get(int key) {
        if(map.containsKey(key)) {
            DoubleLinkedList n = map.get(key);
            setHead(n);
            return n.value;
        } else return -1;
    }
    
    public void set(int key, int value) {
        if(map.containsKey(key)) {
            DoubleLinkedList n = map.get(key);
            n.value = value;
            setHead(n);
        } else {
            DoubleLinkedList n = new DoubleLinkedList(key, value);
            if(size<capacity) {
                setHead(n);
                size++;
            } else {
                removeEnd();
                setHead(n);
            }
            map.put(key, n);
        }
    }
    
    public void setHead(DoubleLinkedList n) {
        if(head==null) {
            head = n;
            end = n;
        } else if(n!=head) {
            if(n.prev!=null) n.prev.next = n.next;
            if(n.next!=null) n.next.prev = n.prev;
            if(n==end) end = end.prev;
            n.next = head;
            head.prev = n;
            n.prev = null;
            head = n;
        }
    }
    
    public void removeEnd() {
        if(end==null) return;
        map.remove(end.key);
        if(head==end) {
            head = null;
            end = null;
        } else {
            end.prev.next = null;
            end = end.prev;
        }
    }
}

class DoubleLinkedList {
    public int key;
    public int value;
    public DoubleLinkedList prev;
    public DoubleLinkedList next;
    public DoubleLinkedList(int key, int value) {
        this.key = key;
        this.value = value;
    }
}


#2 Word Ladder
// BFS algorithm. 
//O(mn) running time. m: number of words in the dictionary  n: length of the word
public class Solution {
    public int ladderLength(String start, String end, Set<String> dict) {
        if(start==null || end==null || dict.size()==0) return 0;
        Queue<String> queue = new LinkedList<String>();
        Queue<Integer> level = new LinkedList<Integer>();
        queue.add(start);
        level.add(1);
        while(!queue.isEmpty()) {
            String str = queue.poll();
            int currLevel = level.poll();
            for(String word: buildSet(str, dict)) {
                if(word.equals(end)) {
                    return currLevel+1;
                }
                if(dict.contains(word)) {
                    queue.add(word);
                    level.add(currLevel+1);
                    dict.remove(word);
                }
            }
        }
        return 0;
    }
    
    public Set<String> buildSet(String str, Set<String> dict) {
        Set<String> set = new TreeSet<String>();
        for(int i=0; i<str.length(); i++) {
            char[] arr = str.toCharArray();
            for(char c ='a'; c<='z'; c++) {
                if(c!=arr[i]) {
                    arr[i] = c;
                    String s = new String(arr);
                    if(dict.contains(s)) set.add(s);
                }
            }
        }
        return set;
    }
}