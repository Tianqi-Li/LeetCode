//[Leetcode]Path Sum I/II

//Path Sum I
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root==null) return false;
        if(root.left==null && root.right==null && root.val==sum) return true;
        return hasPathSum(root.left, sum-root.val) || hasPathSum(root.right, sum-root.val);
    }
}

//Path Sum II
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> tmp = new ArrayList<Integer>();
        dfs(root, sum, res, tmp);
        return res;
    }
    
    public void dfs(TreeNode root, int sum, List<List<Integer>> res, List<Integer> tmp) {
        if(root==null) return;
        tmp.add(root.val);
        if(root.left==null && root.right==null && root.val==sum) {
            res.add(new ArrayList<Integer>(tmp));
        }
        dfs(root.left, sum-root.val, res, tmp);
        dfs(root.right, sum-root.val, res, tmp);
        tmp.remove(tmp.size()-1);
    }
}