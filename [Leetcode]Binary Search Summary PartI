//[Leetcode]Binary Search Summary
#1 Search a 2D Matrix
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        if(m==0) return false;
        int n = matrix[0].length;
        int row=-1;
        int start = 0, end = m-1;
        while(start<=end) {
            int mid = (start+end)/2;
            if(matrix[mid][0]<=target && matrix[mid][n-1]>=target) {
                row = mid;
                break;
            } else if(matrix[mid][0]>target) end = mid-1;
            else if(matrix[mid][n-1]<target) start = mid+1;
        }
        if(row==-1) return false;
        start = 0;
        end = n-1;
        while(start<=end) {
            int mid = (start+end)/2;
            if(matrix[row][mid]==target) return true;
            else if(matrix[row][mid]>target) end = mid-1;
            else if(matrix[row][mid]<target) start = mid+1;
        }
        return false;
    }
}

//Alternative method: treat the 2D matrix as an array
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        if(m==0) return false;
        int n = matrix[0].length;
        int start = 0, end = m*n-1;
        while(start<=end) {
            int mid = (start+end)/2;
            int row = mid/n;
            int col = mid%n;
            if(matrix[row][col]==target) return true;
            else if(matrix[row][col]>target) end = mid-1;
            else start = mid+1;
        }
        return false;
    }
}


#2 Search Insert Position
public class Solution {
    public int searchInsert(int[] A, int target) {
        if(A.length==0) return 0;
        int start = 0, end = A.length-1;
        while(start<=end) {
            int mid = (start+end)/2;
            if(A[mid]==target) return mid;
            else if(A[mid]>target) end = mid-1;
            else start = mid+1;
        }
        return start;
    }
}


#3 Search For a Range
//Use the result of search insert position, find the position of target and target+1
public class Solution {
    public int[] searchRange(int[] A, int target) {
        int[] ret = {-1,-1};
        int n1 = insertPosition(A, target);
        int n2 = insertPosition(A, target+1);
        if(n1==n2) return ret;
        ret[0] = n1;
        ret[1] = n2-1;
        return ret;
    }

    public int insertPosition(int[] A, int target) {
        int start = 0, end = A.length-1;
        while(start<=end) {
            int mid = (start+end)/2;
            if(A[mid]==target) {
                while(mid>0 && A[mid]==A[mid-1]) mid--;
                return mid;
            } else if(A[mid]>target) end = mid-1;
            else start = mid+1;
        }
        return start;
    }
}


#4 Search in Rotated Sorted Array (Unique Elements)
public class Solution {
    public int search(int[] A, int target) {
        int start = 0, end = A.length-1;
        while(start<=end) {
            int mid = (start+end)/2;
            if(A[mid]==target) return mid;
            if(A[start]<=A[mid]) {
                if(A[start]<=target && A[mid]>target) end = mid-1;
                else start = mid+1;
            } else {
                if(A[mid]<target && A[end]>=target) start = mid+1;
                else end = mid-1;
            }
        }
        return -1;
    }
}

#5 Search in Rotated Sorted Array II (Duplicates allowed)
public class Solution {
    public boolean search(int[] A, int target) {
        int start = 0, end = A.length-1;
        while(start<=end) {
            int mid = (start+end)/2;
            if(A[mid]==target) return true;
            if(A[start]<A[mid]) {
                if(A[start]<=target && A[mid]>target) end = mid-1;
                else start = mid+1;
            } else if(A[start]>A[mid]) {
                if(A[mid]<target && A[end]>=target) start = mid+1;
                else end = mid-1;
            } else start++;
        }
        return false;
    }
}


#6 Median of Two Sorted Arrays
public class Solution {
    public double findMedianSortedArrays(int A[], int B[]) {
        int len = A.length+B.length;
        if(len%2==0) return (findKth(A, B, 0, A.length-1, 0, B.length-1, len/2+1)+findKth(A, B, 0, A.length-1, 0, B.length-1, len/2))/2.0;
        else return (double)findKth(A, B, 0, A.length-1, 0, B.length-1, len/2+1);
    }
    
    public int findKth(int[] A, int[] B, int startA, int endA, int startB, int endB, int k) {
        int lenA = endA-startA+1;
        int lenB = endB-startB+1;
        if(lenA>lenB) return findKth(B, A, startB, endB, startA, endA, k);
        if(lenA==0) return B[startB+k-1];
        if(k==1) return Math.min(A[startA], B[startB]);
        int na = Math.min(lenA, k/2);
        int nb = k-na;
        if(A[startA+na-1]<B[startB+nb-1]) return findKth(A, B, startA+na, endA, startB, endB, k-na);
        else if(A[startA+na-1]>B[startB+nb-1]) return findKth(A, B, startA, endA, startB+nb, endB, k-nb);
        else return A[startA+na-1];
    }
}