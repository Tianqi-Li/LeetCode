// Time complexity O(n), space complexity O(n)
public class Solution {
    public int largestRectangleArea(int[] height) {
        int[] h = new int[height.length+1];
        // append zero at the end of h
        for(int i=0; i<height.length; i++) h[i] = height[i];
        int max = 0;
        Stack<Integer> stack = new Stack<Integer>();
        int i=0;
        while(i<h.length) {
            // if the height is in ascending order, add it to stack
            if(stack.isEmpty() || h[stack.peek()]<=h[i]) {
                stack.push(i); // push the index
                i++;
            } else {
                // calculate the max area
                int t = stack.pop();
                int width;
                if(stack.isEmpty()) width = i;
                else width = i-stack.peek()-1;
                max = Math.max(max, width*h[t]);
            }
        }
        return max;
    }
}