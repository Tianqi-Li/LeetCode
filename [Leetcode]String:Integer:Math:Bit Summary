//[Leetcode]String/Integer/Math/Bit Summary
#1 Add Two Numbers
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        return helper(l1, l2, 0);
    }
    
    public ListNode helper(ListNode l1, ListNode l2, int carry) {
        if(l1==null && l2==null && carry==0) return null;
        int n1 = l1==null?0:l1.val;
        int n2 = l2==null?0:l2.val;
        int total = n1 + n2 + carry;
        ListNode head = new ListNode(total%10);
        head.next = helper(l1==null?null:l1.next, l2==null?null:l2.next, total/10);
        return head;
    }
}

#2 Reverse Integer
//Notice: 1. Negative numbers
          2. Integer overflow
public class Solution {
    public int reverse(int x) {
        boolean negative = x<0;
        if(negative) x = Math.abs(x);
        long res = 0;
        while(x>0) {
            int t = x%10;
            x = x/10;
            res = res*10 + t;
        }
        if(negative) return -(int)res;
        else return (int)res;
    }
}

#3 String to Integer(atoi)
public class Solution {
    public int atoi(String str) {
        if(str.length()==0) return 0;
        int i = 0;
        boolean positive = true;
        while(i<str.length()) {
            if(str.charAt(i)==' ') i++;
            else if(!Character.isDigit(str.charAt(i))) {
                if(str.charAt(i)=='+' || str.charAt(i)=='-') {
                    if(str.charAt(i)=='-') positive = false;
                    int j = i+1;
                    while(j<str.length() && Character.isDigit(str.charAt(j))) {
                        Long num = Long.parseLong(str.substring(i+1, j+1));
                        if(num>Integer.MAX_VALUE) return positive?Integer.MAX_VALUE:Integer.MIN_VALUE;
                        else j++;
                    }
                    if(j==i+1) return 0;
                    return positive?Integer.parseInt(str.substring(i+1, j)):-Integer.parseInt(str.substring(i+1,j));
                } else return 0;
            } else {
                int j=i;
                while(j<str.length() && Character.isDigit(str.charAt(j))) {
                        Long num = Long.parseLong(str.substring(i, j+1));
                        if(num>Integer.MAX_VALUE) return Integer.MAX_VALUE;
                        else j++;
                }
                return Integer.parseInt(str.substring(i, j));
            }
        }
        return 0;
    }
}


#4 Single Number 
//O(n) time and O(1) space
public class Solution {
    public int singleNumber(int[] A) {
        int total = 0;
        for(int i=0; i<A.length; i++) {
            total = total ^ A[i];
        }
        return total;
    }
}

#5 Single Number II
public class Solution {
    public int singleNumber(int[] A) {
        int res = 0;
        for(int i=0; i<32; i++) {
            int count = 0;
            int d = 1<<i;
            for(int j=0; j<A.length; j++) {
                if((A[j]&d)!=0) count++;
            }
            if(count%3!=0) res |= d;
        }
        return res;
    }
}


#6 Sqrt(x)
public class Solution {
    public int sqrt(int x) {
        long start = 0;
        long end = x;
        while(start<=end) {
            long mid = (start+end)/2;
            //Use long in case mid*mid will overflow
            if(mid*mid==x)  return (int)mid;
            else if(mid*mid>x) end = mid-1;
            else start = mid+1;
        }
        return (int)(start+end)/2;
    }
}


//If given input is double
public double sqrt(double x) {
    double DELTA = 0.00001;
    double start = 0;
    double end = x;
    double root = x;
    while((end-start)>DELTA) {
        root = (start+end)/2;
        if(root*root==x) return root;
        else if(root*root<x) start = root;
        else end = root;
    }
    return root;
}


#7 Pow(x,n)
public class Solution {
    public double pow(double x, int n) {
        if(n>=0) return helper(x, n);
        else return 1.0/helper(x, -n);
    }
    
    public double helper(double x, int n) {
        if(n==0) return 1;
        double half = helper(x, n/2);
        if(n%2==0) return half*half;
        else return x*half*half;
    }
}


#8 Add Binary
public class Solution {
    public String addBinary(String a, String b) {
        StringBuilder sb1 = new StringBuilder(a);
        StringBuilder sb2 = new StringBuilder(b);
        return helper(sb1.reverse().toString(), sb2.reverse().toString(), 0);
    }
    
    public String helper(String a, String b, int carry) {
        if(a.length()==0 && b.length()==0 && carry==0) return "";
        int n1 = a.length()==0?0:a.charAt(0)-'0';
        int n2 = b.length()==0?0:b.charAt(0)-'0';
        int total = n1+n2+carry;
        String res = "";
        if(a.length()>0) a = a.substring(1);
        if(b.length()>0) b = b.substring(1);
        res += helper(a, b, total/2) + total%2;
        return res;
    }
}


#9 Plus One
public class Solution {
    public int[] plusOne(int[] digits) {
        return plus(digits, 1, digits.length-1);
    }
    
    public int[] plus(int[] digits, int value, int end) {
        if(end<0) {
            int[] res = new int[digits.length+1];
            res[0] = 1;
            for(int i=1; i<=digits.length; i++) {
                res[i] = digits[i-1];
            }
            return res;
        } 
        int total = digits[end] + value;
        if(total<=9) {
            digits[end] = total;
            return digits;
        } else {
            digits[end] = total%10;
            return plus(digits, 1, end-1);
        }
    }
}