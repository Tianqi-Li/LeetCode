//[Leetcode]DP Summary PartII
#1 Jump Game
public class Solution {
    public boolean canJump(int[] A) {
        if(A.length>1 && A[0]==0) return false;
        int[] step = new int[A.length];
        step[0] = A[0];
        for(int i=1; i<A.length; i++) {
            //step[i] records the farest index can jump at i
            step[i] = Math.max(step[i-1], i+A[i]);
            //if i is not the last index and cannot jump beyond i, then return false
            if(step[i]<=i && i<A.length-1) return false;
        }
        return true;
    }
}

#2 Jump Game II
public class Solution {
    public int jump(int[] A) {
        if(A.length==1) return 0;
        int start = 0, end = A[0];
        int count = 1;
        while(end<A.length-1) {
            count++;
            int farest = 0;
            for(int i=start; i<=end; i++) {
                farest = Math.max(farest, i+A[i]);
                if(farest>=A.length-1) return count;
            }
            start = end+1;
            end = farest;
        }
        return count;
    }
}


#3 Unique Paths
//O(mn) time and O(n) space
public class Solution {
    public int uniquePaths(int m, int n) {
        int[] dp = new int[n];
        dp[0] = 1;
        for(int i=0; i<m; i++) {
            for(int j=1; j<n; j++) {
                if(i==0) dp[j] = dp[j-1];
                else dp[j] = dp[j-1] + dp[j];
            }
        }
        return dp[n-1];
    }
}


#4 Unique Paths II
//O(mn) time and O(n) space
public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[] dp = new int[n];
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(obstacleGrid[i][j]==0) {
                    if(i==0 && j==0) dp[0]=1;
                    else if(i==0) dp[j] = dp[j-1];
                    else if(j!=0) dp[j] = dp[j-1] + dp[j];
                } else dp[j] = 0;
            }
        }
        return dp[n-1];
    }
}


#5 Minimum Path Sum
public class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] dp = new int[n];
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(i==0 && j==0) dp[0] = grid[0][0];
                else if(i==0) dp[j] = dp[j-1]+grid[i][j];
                else if(j==0) dp[j] = dp[j]+grid[i][j];
                else dp[j] = Math.min(dp[j-1], dp[j])+grid[i][j];
            }
        }
        return dp[n-1];
    }
}


#6 Climbing Staris
//O(n) time and O(1) space
public class Solution {
    public int climbStairs(int n) {
        if(n<=2) return n;
        int n1 = 1, n2 = 2;
        for(int i=3; i<=n; i++) {
            int tmp = n1;
            n1 = n2;
            n2 += tmp;
        }
        return n2;
    }
}


#7 Edit Distance
public class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length()+1;
        int n = word2.length()+1;
        int[][] dp = new int[m][n];
        for(int i=0; i<n; i++) dp[0][i] = i;
        for(int i=0; i<m; i++) dp[i][0] = i;
        for(int i=1; i<m; i++) {
            for(int j=1; j<n; j++) {
                if(word1.charAt(i-1)==word2.charAt(j-1)) dp[i][j] = dp[i-1][j-1];
                else {
                    dp[i][j] = Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1])) + 1;
                }
            }
        }
        return dp[m-1][n-1];
    }
}


#8 Interleaving String
public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        //check if the length is valid
        if(s1.length()+s2.length()!=s3.length()) return false;
        int m = s1.length()+1;
        int n = s2.length()+1;
        boolean[][] dp = new boolean[m][n];
        dp[0][0] = true;
        for(int i=1; i<n; i++) {
            if(s2.charAt(i-1)==s3.charAt(i-1) && dp[0][i-1]) dp[0][i] = true;
        }
        for(int i=1; i<m; i++) {
            if(s1.charAt(i-1)==s3.charAt(i-1) && dp[i-1][0]) dp[i][0] = true;
        }
        for(int i=1; i<m; i++) {
            for(int j=1; j<n; j++) {
                //use char i-1 from s1
                if(s1.charAt(i-1)==s3.charAt(i+j-1) && dp[i-1][j]) dp[i][j] = true;
                // use char j-1 from s2
                if(s2.charAt(j-1)==s3.charAt(i+j-1) && dp[i][j-1]) dp[i][j] = true;
            }
        }
        return dp[m-1][n-1];
    }
}