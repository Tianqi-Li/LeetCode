//[Leetcode]Integer/String Array Summary PartI
#1 Zigzag Conversion
//Notice the special case: nRows==1
public class Solution {
    public String convert(String s, int nRows) {
        if(nRows==1) return s;
        StringBuilder[] strs = new StringBuilder[nRows];
        for(int i=0; i<nRows; i++) strs[i] = new StringBuilder();
        int row = 0;
        int flag = 0;
        for(int i=0; i<s.length(); i++) {
            strs[row].append(s.charAt(i));
            //Going down
            if(flag==0) {
                if(row!=nRows-1) row++;
                else {
                    row--;
                    flag=1;
                }
            } else {
                //Going up
                if(row!=0) row--;
                else {
                    row++;
                    flag=0;
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for(int i=0; i<nRows; i++) sb.append(strs[i]);
        return sb.toString();
    }
}


#2 Container With Most Water
public class Solution {
    public int maxArea(int[] height) {
        int maxV = 0;
        int left = 0;
        int right = height.length-1;
        while(left<right) {
            maxV = Math.max(maxV, (right-left)*Math.min(height[left], height[right]));
            if(height[left]<height[right]) left++;
            else right--;
        }
        return maxV;
    }
}


#3 Remove Duplicates from Sorted Array
public class Solution {
    public int removeDuplicates(int[] A) {
        if(A.length<=1) return A.length;
        int unique = 0;
        int run = 1;
        while(run<A.length) {
            if(A[run]==A[unique]) run++;
            else {
                int tmp = A[unique+1];
                A[unique+1] = A[run];
                A[run] = tmp;
                unique++;
                run++;
            }
        }
        return unique+1;
    }
}

#3(1) Remove Duplicates from Sorted Array II(Allow two duplicates)
public class Solution {
    public int removeDuplicates(int[] A) {
        if(A.length<=2) return A.length;
        int valid = 0;
        int run = 1;
        while(run<A.length) {
            if(valid>=1 && A[run]==A[valid] && A[run]==A[valid-1]) run++;
            else {
                int tmp = A[valid+1];
                A[valid+1] = A[run];
                A[run] = tmp;
                valid++;
                run++;
            }
        }
        return valid+1;
    }
}


#4 Remove Element
public class Solution {
    public int removeElement(int[] A, int elem) {
        int last = -1;
        int run = 0;
        while(run<A.length) {
            if(A[run]==elem) run++;
            else {
                int tmp = A[last+1];
                A[last+1] = A[run];
                A[run] = tmp;
                last++;
                run++;
            }
        }
        return last+1;
    }
}


#5 Trapping Rain Water
public class Solution {
    public int trap(int[] A) {
        if(A.length<=1) return 0;
        int[] left = new int[A.length];
        int[] right = new int[A.length];
        int leftH = A[0];
        int rightH = A[A.length-1];
        for(int i=1; i<A.length; i++) {
            left[i] = leftH;
            if(A[i]>leftH) leftH = A[i];
        }
        for(int i=A.length-2; i>=0; i--) {
            right[i] = rightH;
            if(A[i]>rightH) rightH = A[i];
        }
        int total = 0;
        for(int i=0; i<A.length; i++) {
            if(Math.min(left[i],right[i])>A[i]) total += (Math.min(left[i],right[i])-A[i]);
        }
        return total;
    }
}


#6 Rotate Image
public class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        for(int layer=0; layer<n/2; layer++) {
            int end = n-1-layer;
            for(int i=layer; i<end; i++) {
                int offset = i-layer;
                int tmp = matrix[layer][i];
                matrix[layer][i] = matrix[end-offset][layer];
                matrix[end-offset][layer] = matrix[end][end-offset];
                matrix[end][end-offset] = matrix[i][end];
                matrix[i][end] = tmp;
            }
        }
    }
}


#7 Spiral Matrix I
public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<Integer>();
        int m = matrix.length;
        if(m==0) return res;
        int n = matrix[0].length;
        int rowStart = 0, rowEnd = m-1;
        int colStart = 0, colEnd = n-1;
        while(rowStart<=rowEnd && colStart<=colEnd) {
            if(rowStart==rowEnd) {
                for(int i=colStart; i<=colEnd; i++) res.add(matrix[rowStart][i]);
            } else if(colStart==colEnd) {
                for(int i=rowStart; i<=rowEnd; i++) res.add(matrix[i][colStart]);
            } else {
                for(int i=colStart; i<colEnd; i++) res.add(matrix[rowStart][i]);
                for(int i=rowStart; i<rowEnd; i++) res.add(matrix[i][colEnd]);
                for(int i=colEnd; i>colStart; i--) res.add(matrix[rowEnd][i]);
                for(int i=rowEnd; i>rowStart; i--) res.add(matrix[i][colStart]);
            }
            rowStart++;
            colStart++;
            rowEnd--;
            colEnd--;
        }
        return res;
    }
}


#8 Spiral Matrix II
public class Solution {
    public int[][] generateMatrix(int n) {
        int[][] res = new int[n][n];
        int count = 1;
        for(int layer=0; layer<=n-1-layer; layer++) {
            int end = n-1-layer;
            if(layer==end) res[layer][layer]=count;
            else {
                for(int i=layer; i<end; i++) res[layer][i]=count++;
                for(int i=layer; i<end; i++) res[i][end]=count++;
                for(int i=end; i>layer; i--) res[end][i]=count++;
                for(int i=end; i>layer; i--) res[i][layer]=count++;
            }
        }
        return res;
    }
}


#9 Set Matrix Zeros
public class Solution {
    public void setZeroes(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        boolean firstRow = false;
        boolean firstCol = false;
        for(int i=0; i<n; i++) {
            if(matrix[0][i]==0) {
                firstRow = true;
                break;
            }
        }
        for(int i=0; i<m; i++) {
            if(matrix[i][0]==0) {
                firstCol = true;
                break;
            }
        }
        for(int i=1; i<m; i++) {
            for(int j=1; j<n; j++) {
                if(matrix[i][j]==0) {
                    matrix[0][j] = 0;
                    matrix[i][0] = 0;
                }
            }
        }
        for(int i=1; i<m; i++) {
            for(int j=1; j<n; j++) {
                if(matrix[0][j]==0 || matrix[i][0]==0) matrix[i][j]=0;
            }
        }
        if(firstRow) {
            for(int i=0; i<n; i++) matrix[0][i] = 0;
        }
        if(firstCol) {
            for(int i=0; i<m; i++) matrix[i][0] = 0;
        }
    }
}


#10 Sort Colors
public class Solution {
    public void sortColors(int[] A) {
        int one = 0;
        int two = A.length;
        for(int i=0; i<A.length && i<two; i++) {
            if(A[i]==0) {
                int tmp = A[one];
                A[one] = A[i];
                A[i] = tmp;
                one++;
            } else if(A[i]==2) {
                int tmp = A[two-1];
                A[two-1] = A[i];
                A[i] = tmp;
                two--;
                i--;
            }
        }
    }
}