//[Leetcode]Integer Array Summary 

#1 Two Sum
public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        HashMap<Integer, Integer> table = new HashMap<Integer,Integer>();
        int[] ret = new int[2];
        for(int i=0; i<numbers.length; i++) {
            if(table.containsKey(target-numbers[i])) {
                ret[0] = table.get(target-numbers[i]);
                ret[1] = i+1;
                return ret;
            } else table.put(numbers[i], i+1);
        }
        return ret;
    }
}

#2 3Sum
public class Solution {
    public List<List<Integer>> threeSum(int[] num) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(num.length==0) return res;
        Arrays.sort(num);
        for(int i=0; i<num.length-2; i++){
            if(i>0 && num[i]==num[i-1]) continue;
            int start = i+1;
            int end = num.length-1;
            while(start<end) {
                if(num[start]+num[end]==-num[i]) {
                    List<Integer> list = new ArrayList<Integer>();
                    list.add(num[i]);
                    list.add(num[start]);
                    list.add(num[end]);
                    res.add(list);
                    do{start++;} while(end>start && num[start]==num[start-1]);
                    do{end--;} while(end>start && num[end]==num[end+1]);
                } else if(num[start]+num[end]>-num[i]) end--;
                else start++;
            }
        }
        return res;
    }
}

#3 3Sum Closest
public class Solution {
    public int threeSumClosest(int[] num, int target) {
        int res = num[0]+num[1]+num[2];
        Arrays.sort(num);
        for(int i=0; i<num.length-2; i++) {
            int start = i+1;
            int end = num.length-1;
            while(start<end) {
                int total = num[i]+num[start]+num[end];
                if(Math.abs(total-target)<Math.abs(res-target)) res=total;
                if(total<target) start++;
                else end--;
            }
        }
        return res;
    }
}


#4 4Sum
public class Solution {
    public List<List<Integer>> fourSum(int[] num, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Arrays.sort(num);
        for(int i=0; i<num.length-3; i++) {
            if(i>0 && num[i]==num[i-1]) continue;
            for(int j=i+1; j<num.length-2; j++) {
                if(j>i+1 && num[j]==num[j-1]) continue;
                int start = j+1;
                int end = num.length-1;
                while(start<end) {
                    int total = num[i]+num[j]+num[start]+num[end];
                    if(total==target) {
                        List<Integer> list = new ArrayList<Integer>();
                        list.add(num[i]);
                        list.add(num[j]);
                        list.add(num[start]);
                        list.add(num[end]);
                        res.add(list);
                        do{start++;} while(start<end && num[start]==num[start-1]);
                        do{end--;} while(start<end && num[end]==num[end+1]);
                    } else if(total<target) start++;
                    else end--;
                }
            }
        }
        return res;
    }
}


#5 First Missing Positive
public class Solution {
    public int firstMissingPositive(int[] A) {
        for(int i=0; i<A.length; i++) {
            if(A[i]>0 && A[i]!=i+1 && A[i] <= A.length  && A[i]!= A[A[i]-1]) {
                int temp = A[A[i]-1];
                A[A[i]-1] = A[i];
                A[i] = temp;
                i--;
            }
        }
        for(int i=0; i<A.length; i++) {
            if(A[i]!=i+1) return i+1;
        }
        return A.length+1;
    }
}
