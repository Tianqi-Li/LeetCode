//[LeetCode]DP Summary Part I(1D)
//#1 Unique Paths
// Time complexity O(mn), space O(n)
public class Solution {
    public int uniquePaths(int m, int n) {
        int[] dp = new int[n];
        dp[0] = 1;
        for(int i=0; i<m; i++) {
            for(int j=1; j<n; j++) {
                if(i==0) dp[j] = 1;
                else dp[j] = dp[j] + dp[j-1];
            }
        }
        return dp[n-1];
    }
}


//#2 Unique Paths II
//Time complexity O(mn), space O(n)
public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        if(m==0) return 0;
        int n = obstacleGrid[0].length;
        if(obstacleGrid[0][0]==1) return 0;
        int[] dp = new int[n];
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(obstacleGrid[i][j]==0) {
                    if(i==0 && j==0) dp[j] = 1;
                    else dp[j] = (i>0?dp[j]:0) + (j>0?dp[j-1]:0);
                }else dp[j] = 0;
            }
        }
        return dp[n-1];
    }
}



//#3 Minimum Path Sum
//Time complexity O(mn), space O(n)
public class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        if(m==0) return 0;
        int n = grid[0].length;
        int[] dp = new int[n];
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(i==0 && j==0) dp[0] = grid[0][0];
                else {
                    int top = i>0?dp[j]:Integer.MAX_VALUE;
                    int left = j>0?dp[j-1]:Integer.MAX_VALUE;
                    dp[j] = grid[i][j] + Math.min(top, left);
                }
            }
        }
        return dp[n-1];
    }
}



//#4 Triangle
//Space complexity O(n)
//From bottom to up
public class Solution {
    public int minimumTotal(ArrayList<ArrayList<Integer>> triangle) {
        int n = triangle.size();
        if(n==0) return 0;
        int[] dp = new int[n];
        for(int i=0; i<n; i++) {
            dp[i] = triangle.get(n-1).get(i);
        }
        for(int i=n-2; i>=0; i--) {
            for(int j=0; j<triangle.get(i).size(); j++) {
                dp[j] = triangle.get(i).get(j) + Math.min(dp[j],dp[j+1]);
            }
        }
        return dp[0];
    }
}