//[Leetcode]Integer/String Array Summary PartII
#1 Simplify Path
public class Solution {
    public String simplifyPath(String path) {
        if(path.length()==0) return "";
        String[] strs = path.split("/");
        Stack<String> stack = new Stack<String>();
        for(int i=0; i<strs.length; i++) {
            if(strs[i].length()==0 || strs[i].equals(".")) continue;
            if(strs[i].equals("..")) {
                if(!stack.isEmpty()) stack.pop();
            }
            else stack.push(strs[i]);
        }
        StringBuilder sb = new StringBuilder();
        if(stack.isEmpty()) return "/";
        while(!stack.isEmpty()) sb.insert(0, '/' + stack.pop());
        return sb.toString();
    }
}


#2 Minimum Window Substring
//Use a target array to keep the characters in String T, and a record array to keep the //characters in String S that appears in String T. And count the valid length of the substring.
//When the valid length equals the length of String T, move start pointer to get rid of the non-exist or duplicate characters, and update the minStart and minLen of the substring.
//Running time O(n)
public class Solution {
    public String minWindow(String S, String T) {
        if(S.length()==0 || T.length()==0) return "";
        int start=0, end=0;
        int minStart=0;
        int minLen = Integer.MAX_VALUE;
        int count=0;
        int[] target = new int[256];
        int[] record = new int[256];
        for(int i=0; i<T.length(); i++) target[T.charAt(i)]++;
        for(end=0; end<S.length(); end++) {
            if(target[S.charAt(end)]>0) {
                record[S.charAt(end)]++;
                if(record[S.charAt(end)]<=target[S.charAt(end)]) count++;
            }
            if(count==T.length()) {
                while(target[S.charAt(start)]==0 || record[S.charAt(start)]>target[S.charAt(start)]) {
                    record[S.charAt(start)]--;
                    start++;
                }
                if((end-start+1)<minLen) {
                    minLen = end-start+1;
                    minStart = start;
                }
            }
        }
        if(minLen==Integer.MAX_VALUE) return "";
        return S.substring(minStart, minStart+minLen);
    }
}


#3 Largest Rectangle in Histogram
public class Solution {
    public int largestRectangleArea(int[] height) {
        int[] h = new int[height.length+1];
        for(int i=0; i<height.length; i++) h[i]=height[i];
        Stack<Integer> stack = new Stack<Integer>();
        int max = 0;
        int i=0;
        while(i<h.length) {
            //If the height is in ascending order, add the index to stack
            if(stack.isEmpty() || h[i]>=h[stack.peek()]) {
                stack.push(i);
                i++;
            } else {
                //Calculate the max area
                int t = stack.pop();
                int width;
                if(stack.isEmpty()) width = i;
                else width = i - stack.peek()-1;
                max = Math.max(max, h[t]*width);
            }
        }
        return max;
    }
}


#4 Maximal Rectangle
public class Solution {
    public int maximalRectangle(char[][] matrix) {
        int m = matrix.length;
        if(m==0) return 0;
        int n = matrix[0].length;
        int[][] ret = new int[m][n];
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                int v = matrix[i][j] - '0';
                if(v==1) {
                    if(i==0) ret[i][j] = 1;
                    else ret[i][j] = 1 + ret[i-1][j];
                }
            }
        }
        int maxArea = 0;
        for(int i=0; i<m; i++) {
            maxArea = Math.max(maxArea, largestRectangleArea(ret[i]));
        }
        return maxArea;
    }
    
    public int largestRectangleArea(int[] height) {
        int[] h = new int[height.length+1];
        for(int i=0; i<height.length; i++) h[i]=height[i];
        Stack<Integer> stack = new Stack<Integer>();
        int max = 0;
        int i=0;
        while(i<h.length) {
            //If the height is in ascending order, add the index to stack
            if(stack.isEmpty() || h[i]>=h[stack.peek()]) {
                stack.push(i);
                i++;
            } else {
                //Calculate the max area
                int t = stack.pop();
                int width;
                if(stack.isEmpty()) width = i;
                else width = i - stack.peek()-1;
                max = Math.max(max, h[t]*width);
            }
        }
        return max;
    }
}


#5 Merge Sorted Array
public class Solution {
    public void merge(int A[], int m, int B[], int n) {
        int i = m-1;
        int j = n-1;
        int run = m+n-1;
        while(i>=0 && j>=0) {
            if(A[i]>B[j]) A[run--] = A[i--];
            else A[run--] = B[j--];
        }
        if(i<0) {
            while(j>=0) A[run--] = B[j--];
        }
        if(j<0) {
            while(i>=0) A[run--] = A[i--];
        }
    }
}


#6 Gray Code
public class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> list = new ArrayList<Integer>();
        int size = 1 << n;
        for(int i=0; i<size; i++) {
            // i's next gray code equals i^(i>>1)
            list.add(i ^ (i>>1));
        }
        return list;
    }
}



