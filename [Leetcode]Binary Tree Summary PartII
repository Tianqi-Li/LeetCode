//[Leetcode]Binary Tree Summary PartII
#1 Binary Tree Level Order Traversal
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        addNode(res, root, 0);
        return res;
    }
    
    public void addNode(List<List<Integer>> res, TreeNode root, int level) {
        if(root==null) return;
        List<Integer> list = null;
        if(level==res.size()) {
            list = new ArrayList<Integer>();
            res.add(list);
        } else list = res.get(level);
        list.add(root.val);
        addNode(res, root.left, level+1);
        addNode(res, root.right, level+1);
    }
}


#2 Binary Tree Level Order Traversal II
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(root==null) return res;
        addNode(res, root, 0);
        Collections.reverse(res);
        return res;
    }
    
    public void addNode(List<List<Integer>> res, TreeNode root, int level) {
        if(root==null) return;
        List<Integer> list = null;
        if(level==res.size()) {
            list = new ArrayList<Integer>();
            res.add(list);
        } else list = res.get(level);
        list.add(root.val);
        addNode(res, root.left, level+1);
        addNode(res, root.right, level+1);
    }
}


#3 Binary Tree Zigzag Level Order Traversal
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        addNode(res, root, 0);
        int ret = 0;
        for(int i=0; i<res.size(); i++) {
            if(ret%2==1) Collections.reverse(res.get(i));
            ret++;
        }
        return res;
    }
    
    public void addNode(List<List<Integer>> res, TreeNode root, int level) {
        if(root==null) return;
        List<Integer> list = null;
        if(level==res.size()) {
            list = new ArrayList<Integer>();
            res.add(list);
        } else list = res.get(level);
        list.add(root.val);
        addNode(res, root.left, level+1);
        addNode(res, root.right, level+1);
    }
}

#4 Maximum Depth of Binary Tree
//Recursive Method
public class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        return Math.max(left, right)+1;
    }
}

//Iterative Method. Track the size of stack during postorder traversal
//The maximum stack size is the maximum depth of the tree
public class Solution {
	public int maxDepth(TreeNode root) {
		if(root==null) return 0;
		int max = 0;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        TreeNode prev = null;
        while(!stack.isEmpty()) {
            max = Math.max(max, stack.size());
            TreeNode curr = stack.peek();
            if(prev==null || prev.left==curr || prev.right==curr) {
                if(curr.left!=null) stack.push(curr.left);
                else if(curr.right!=null) stack.push(curr.right);
                else stack.pop();
            } else if(curr.left==prev) {
                if(curr.right!=null) stack.push(curr.right);
                else stack.pop();
            } else if(curr.right==prev) stack.pop();
            prev = curr;
        }
        return max;
	}
}


#5 Minimum Depth of Binary Tree
//BFS Iterative Method
public class Solution {
    public int minDepth(TreeNode root) {
        if(root==null) return 0;
        Queue<TreeNode> nodes = new LinkedList<TreeNode>();
        Queue<Integer> depth = new LinkedList<Integer>();
        nodes.add(root);
        depth.add(1);
        while(!nodes.isEmpty()) {
           TreeNode n =  nodes.poll();
           int d = depth.poll();
           if(n.left==null && n.right==null) return d;
           if(n.left!=null) {
               nodes.add(n.left);
               depth.add(d+1);
           }
           if(n.right!=null) {
               nodes.add(n.right);
               depth.add(d+1);
           }
        }
        return -1;
    }
}


#6 Construct Binary Tree From Preorder and Inorder Traversal
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return helper(preorder, inorder, 0, preorder.length-1, 0, inorder.length-1);
    }
    
    public TreeNode helper(int[] preorder, int[] inorder, int pStart, int pEnd, int iStart, int iEnd) {
        if(pStart>pEnd || iStart>iEnd) return null;
        TreeNode root = new TreeNode(preorder[pStart]);
        int p = -1;
        for(int i=iStart; i<=iEnd; i++) {
            if(inorder[i]==root.val) {
                p = i;
                break;
            }
        }
        if(p!=-1) {
            int leftSize = p - iStart;
            root.left = helper(preorder, inorder, pStart+1, pStart+leftSize, iStart, p-1);
            root.right = helper(preorder, inorder, pStart+leftSize+1, pEnd, p+1, iEnd);
        }
        return root;
    }
}


#7 Construct Binary Tree From Inorder and Postorder Traversal
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return helper(inorder, postorder, 0, inorder.length-1, 0, postorder.length-1);
    }
    
    public TreeNode helper(int[] inorder, int[] postorder, int iStart, int iEnd, int pStart, int pEnd) {
        if(iStart>iEnd || pStart>pEnd) return null;
        TreeNode root = new TreeNode(postorder[pEnd]);
        int p = -1;
        for(int i=iStart; i<=iEnd; i++) {
            if(inorder[i]==root.val) {
                p = i;
                break;
            }
        }
        if(p!=-1) {
            int leftSize = p-iStart;
            root.left = helper(inorder, postorder, iStart, p-1, pStart, pStart+leftSize-1);
            root.right = helper(inorder, postorder, p+1, iEnd, pStart+leftSize, pEnd-1);
        }
        return root;
    }
}


#8 Convert Sorted Array to Binary Search Tree
public class Solution {
    public TreeNode sortedArrayToBST(int[] num) {
        if(num.length==0) return null;
        return helper(num, 0, num.length-1);
    }
    
    public TreeNode helper(int[] num, int start, int end) {
        if(start>end) return null;
        int mid = (start+end)/2;
        TreeNode root = new TreeNode(num[mid]);
        root.left = helper(num, start, mid-1);
        root.right = helper(num, mid+1, end);
        return root;
    }
}


#9 Convert Sorted List to Binary Search Tree
public class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        if(head==null) return null;
        if(head.next==null) return new TreeNode(head.val);
        ListNode fast = head;
        ListNode slow = head;
        while(fast!=null && fast.next!=null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        fast = head;
        while(fast.next!=slow) fast = fast.next;
        fast.next = null;
        TreeNode root = new TreeNode(slow.val);
        root.left = sortedListToBST(head);
        root.right = sortedListToBST(slow.next);
        return root;
    }
}