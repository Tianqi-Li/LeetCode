//[LeetCode]DFS Part II
//#1 Word Search
	public boolean exist(char[][] board, String word) {
        if(board.length==0) return false;
        if(word.length()==0) return false;
        for(int i=0; i<board.length; i++) {
            for(int j=0; j<board[0].length; j++) {
                if(dfs(board, word, i, j)) return true;
            }
        }
        return false;
    }
    
    public boolean dfs(char[][] board, String word, int x, int y) {
        if(word.length()==1 && board[x][y]==word.charAt(0)) return true;
        if(board[x][y]!=word.charAt(0)) return false;
        int m = board.length;
        int n = board[0].length;
        boolean up=false, left=false, down=false, right=false;
        char tmp = board[x][y];
        board[x][y]='.';
        if(x>0 && board[x-1][y]!='.') up = dfs(board, word.substring(1), x-1, y);
        if(!up && y>0 && board[x][y-1]!='.') left = dfs(board, word.substring(1), x, y-1);
        if(!up && !left && x<m-1 && board[x+1][y]!='.') down = dfs(board, word.substring(1), x+1, y);
        if(!up && !left && !down && y<n-1 && board[x][y+1]!='.') right = dfs(board, word.substring(1), x, y+1);
        board[x][y] =  tmp;
        return up || left || down || right;
    }



//#2 N-Queens
    public ArrayList<String[]> solveNQueens(int n) {
        ArrayList<String[]> res = new ArrayList<String[]>();
        if(n==0) return res;
        int[] queens = new int[n];
        dfs(res, queens, 0);
        return res;
    }
    
    public void dfs(ArrayList<String[]> res, int[] tmp, int row) {
        if(row==tmp.length) {
            saveBoard(res, tmp);
            return;
        }
        for(int i=0; i<tmp.length; i++) {
            tmp[row] = i;
            if(isValid(tmp, row, i)) {
                dfs(res, tmp, row+1);
            }
        }
    }
    
    public boolean isValid(int[] queens, int row, int col) {
        for(int i=0; i<row; i++) {
            if(queens[i]==col || Math.abs(col-queens[i])==(row-i)) return false;
        }
        return true;
    }
    
    public void saveBoard(ArrayList<String[]> res, int[] queens) {
        String[] board = new String[queens.length];
        for(int i=0; i<board.length; i++) {
            StringBuilder sb = new StringBuilder();
            for(int j=0; j<board.length; j++) {
                if(j!=queens[i]) sb.append(".");
                else sb.append("Q");
            }
            board[i] = sb.toString();
        }
        res.add(board);
    }


//#3 N-Queens II
public class Solution {
    int count = 0;
    public int totalNQueens(int n) {
        if(n==0) return 0;
        int[] queens = new int[n];
        dfs(queens, 0);
        return count;
    }
    
    public void dfs(int[] queens, int row) {
        if(row==queens.length) count++;
        else {
            for(int i=0; i<queens.length; i++) {
                queens[row] = i;
                if(isValid(queens, row, i)) dfs(queens, row+1);
            }
        }
    }
    
    public boolean isValid(int[] queens, int row, int col) {
        for(int i=0; i<row; i++) {
            if(queens[i]==col || Math.abs(col-queens[i])==(row-i)) return false;
        }
        return true;
    }
}



//#4 Sudoku Solver
public class Solution {
    public void solveSudoku(char[][] board) {
        solved(board);
    }
    
    public boolean solved(char[][] board) {
        for(int i=0; i<9; i++) {
            for(int j=0; j<9; j++) {
                if(board[i][j]=='.') {
                    for(char c = '1'; c<='9'; c++) {
                        if(isValid(board,i,j,c)) {
                            board[i][j] = c;
                            if(solved(board)) return true;
                            else board[i][j] = '.';
                        } 
                    }
                    return false;
                }
            }
        }
        return true;
    }

    public boolean isValid(char[][] board, int x, int y, char c) {
        for(int i=0; i<9; i++) {
            // check row
            if(board[x][i]==c) return false;
            // check column
            if(board[i][y]==c) return false;
            // check grid
            int row = 3*(x/3) + i/3;
            int col = 3*(y/3) + i%3;
            if(board[row][col]==c) return false;
        }
        return true;
    }
}