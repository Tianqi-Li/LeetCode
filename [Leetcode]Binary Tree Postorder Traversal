//[Leetcode]Binary Tree Postorder Traversal
//Iterative method
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        if(root==null) return res;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        TreeNode prev = null;
        while(!stack.isEmpty()) {
            TreeNode curr = stack.peek();
            //Go down the tree and add the current node to the stack, 
            //if the current node is a leaf then pop it from 
            //the stack and add to the list
            if(prev==null || prev.left==curr || prev.right==curr) {
                if(curr.left!=null) stack.push(curr.left);
                else if(curr.right!=null) stack.push(curr.right);
                else {
                    stack.pop();
                    res.add(curr.val);
                }
            } 
            //Go up the tree from left child, check if the parent node has right child
            else if(curr.left==prev) {
                if(curr.right!=null) stack.push(curr.right);
                else {
                    stack.pop();
                    res.add(curr.val);
                }
            } 
            //Go up the tree from right child
            else if(curr.right==prev) {
                stack.pop();
                res.add(curr.val);
            }
            prev = curr;
        }
        return res;
    }
}