//[Leetcode]Array/String Summary Part V
#1 Length of Last Word
public class Solution {
    public int lengthOfLastWord(String s) {
        if(s.length()==0) return 0;
        int end = s.length()-1;
        while(end>=0 && s.charAt(end)==' ') end--;
        if(end<0) return 0;
        int start = end;
        while(start>=0 && s.charAt(start)!=' ') start--;
        return end-start;
    }
}


#2 Distinct Subsequences
public class Solution {
    public int numDistinct(String S, String T) {
        int m = T.length()+1;
        int n = S.length()+1;
        int[][] dp = new int[m][n];
        //Initialize the first row to be 1
        //"" matches any character
        for(int i=0; i<n; i++) dp[0][i] = 1;
        for(int i=1; i<m; i++) {
            for(int j=1; j<n; j++) {
                if(T.charAt(i-1)==S.charAt(j-1)) dp[i][j] = dp[i-1][j-1]+dp[i][j-1];
                else dp[i][j] = dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
}


#3 Permutation Sequence
public class Solution {
    public String getPermutation(int n, int k) {
        int[] num = new int[n];
        int perCount = 1;
        for(int i=0; i<n; i++) {
            num[i] = i+1;
            perCount *= num[i];
        }
        String res = "";
        k = k-1;
        for(int i=0; i<n; i++) {
            perCount = perCount/(n-i);
            int selected = k/perCount;
            res += num[selected];
            k = k%perCount;
            for(int j=selected; j<n-i-1; j++) num[j]= num[j+1];
        }
        return res;
    }
}


#4 Longest Consecutive Sequence
//O(n) time and O(n) space
public class Solution {
    public int longestConsecutive(int[] num) {
        if(num.length==0) return 0;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i=0; i<num.length; i++) map.put(num[i], 1);
        int max = 1;
        for(int i=0; i<num.length; i++) {
            if(map.containsKey(num[i])) {
                map.remove(num[i]);
                int start = num[i];
                int end = num[i];
                while(map.containsKey(start-1)) {
                    start--;
                    map.remove(start);
                }
                while(map.containsKey(end+1)) {
                    end++;
                    map.remove(end);
                }
                max = Math.max(max, end-start+1);
            }
        }
        return max;
    }
}


#5 Scramble String
public class Solution {
    public boolean isScramble(String s1, String s2) {
        if(s1.equals(s2)) return true;
        if(s1.length()==2 && s2.length()==2) {
            if(s1.charAt(0)==s2.charAt(1) && s1.charAt(1)==s2.charAt(0)) return true;
            else return false;
        }
        for(int i=1; i<s1.length(); i++) {
            String s11 = s1.substring(0,i);
            String s21 = s2.substring(0,i);
            String s12 = s1.substring(i);
            String s22 = s2.substring(i);
            if(sameChar(s11, s21) && sameChar(s12, s22) && isScramble(s11, s21) && isScramble(s12, s22)) return true;
            s21 = s2.substring(0, s12.length());
            s22 = s2.substring(s12.length());
            if(sameChar(s11, s22) && sameChar(s12, s21) && isScramble(s11, s22) && isScramble(s12, s21)) return true;
        }
        return false;
    }
    
    //Check if two strings contains same chars before checking if they are scramble strings
    public boolean sameChar(String s1, String s2) {
        char[] c1 = s1.toCharArray();
        char[] c2 = s2.toCharArray();
        Arrays.sort(c1);
        Arrays.sort(c2);
        return Arrays.equals(c1, c2);
    }
}


#6 Gas Station
public class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int start = 0;
        int total = 0;
        int remain = 0;
        for(int i=0; i<gas.length; i++) {
            total += gas[i]-cost[i];
            remain += gas[i] - cost[i];
            if(remain<0) {
                start = i+1;
                remain = 0;
            }
            
        }
        if(total<0) return -1;
        else return start;
    }
}


#7 Candy
public class Solution {
    public int candy(int[] ratings) {
        int n = ratings.length;
        if(n==0) return 0;
        int[] dp = new int[n];
        dp[0] = 1;
        for(int i=1; i<n; i++) {
            if(ratings[i]>ratings[i-1]) dp[i] = dp[i-1]+1;
            else dp[i] = 1;
        }
        int count = dp[n-1];
        for(int i=n-2; i>=0; i--) {
            int cur = 1;
            if(ratings[i]>ratings[i+1]) cur = dp[i+1]+1;
            count += Math.max(dp[i], cur);
            dp[i] = cur;
        }
        return count;
    }
}


#8 Word Break
public class Solution {
    public boolean wordBreak(String s, Set<String> dict) {
        if(s.length()==0) return false;
        boolean[] dp = new boolean[s.length()];
        for(int i=0; i<s.length(); i++) {
            if(dict.contains(s.substring(0,i+1))) {
                dp[i] = true;
                continue;
            }
            for(int j=0; j<i; j++) {
                if(dp[j] && dict.contains(s.substring(j+1, i+1))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()-1];
    }
}


#9 Word Break II
public class Solution {
    public List<String> wordBreak(String s, Set<String> dict) {
        List<String> res = new ArrayList<String>();
        if(!canwordBreak(s, dict)) return res;
        dfs(res, "", s, dict, 0);
        return res;
    }
    
    public void dfs(List<String> res, String tmp, String s, Set<String> dict, int start) {
        if(start==s.length()) {
            res.add(tmp.substring(0, tmp.length()-1));
            return;
        }
        for(int i=start; i<s.length(); i++) {
            if(dict.contains(s.substring(start, i+1))) {
                dfs(res, tmp+s.substring(start, i+1)+" ", s, dict, i+1);
            }
        }
    }
    
    public boolean canwordBreak(String s, Set<String> dict) {
        if(s.length()==0) return false;
        boolean[] dp = new boolean[s.length()];
        for(int i=0; i<s.length(); i++) {
            if(dict.contains(s.substring(0,i+1))) {
                dp[i] = true;
                continue;
            }
            for(int j=0; j<i; j++) {
                if(dp[j] && dict.contains(s.substring(j+1, i+1))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()-1];
    }
}


#10 Evaluate Reverse Polish Notation
public class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<Integer>();
        for(int i=0; i<tokens.length; i++) {
            if(tokens[i].equals("+") || tokens[i].equals("-") || tokens[i].equals("*") || tokens[i].equals("/")) {
                int a = stack.pop();
                int b = stack.pop();
                if(tokens[i].equals("+")) stack.push(a+b);
                else if(tokens[i].equals("-")) stack.push(b-a);
                else if(tokens[i].equals("*")) stack.push(a*b);
                else stack.push(b/a);
            } else stack.push(Integer.parseInt(tokens[i]));
        }
        return stack.pop();
    }
}


#11 Reverse Words in a String
public class Solution {
    public String reverseWords(String s) {
        StringBuilder sb = new StringBuilder();
        int i = s.length()-1;
        while(i>=0) {
            if(s.charAt(i)==' ') i--;
            else {
                int j = i-1;
                while(j>=0 && s.charAt(j)!=' ') j--;
                sb.append(s.substring(j+1, i+1) + " ");
                i = j;
            }
        }
        String res = sb.toString();
        if(res.length()==0) return res;
        else return res.substring(0, res.length()-1);
    }
}

#12 Valid Sudoku
public class Solution {
    public boolean isValidSudoku(char[][] board) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int row=0; row<9; row++) {
            map.clear();
            for(int col=0; col<9; col++) {
                if(board[row][col]=='.') continue;
                int n = board[row][col] - '0';
                if(map.containsKey(n)) return false;
                else map.put(n, 1);
            }
        }
        for(int col=0; col<9; col++) {
            map.clear();
            for(int row=0; row<9; row++) {
                if(board[row][col]=='.') continue;
                int n = board[row][col] - '0';
                if(map.containsKey(n)) return false;
                else map.put(n, 1);
            }
        }
        for(int i=0; i<9; i+=3) {
            for(int j=0; j<9; j+=3) {
                map.clear();
                for(int m=i; m<i+3; m++) {
                    for(int n=j; n<j+3; n++) {
                        if(board[m][n]=='.') continue;
                        int v = board[m][n] - '0';
                        if(map.containsKey(v)) return false;
                        else map.put(v, 1);
                    }
                }
            }
        }
        return true;
    }
}


#13 Sudoku Solver
public class Solution {
    public void solveSudoku(char[][] board) {
        isSolved(board);
    }
    
    public boolean isSolved(char[][] board) {
        for(int i=0; i<9; i++) {
            for(int j=0; j<9; j++) {
                if(board[i][j]=='.') {
                    for(char c='1'; c<='9'; c++) {
                        if(isValid(board, i, j, c)) {
                            board[i][j] = c;
                            if(isSolved(board)) return true;
                            else board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    public boolean isValid(char[][] board, int row, int col, char c) {
        for(int i=0; i<9; i++) {
            if(board[row][i]==c) return false;
        }
        for(int i=0; i<9; i++) {
            if(board[i][col]==c) return false;
        }
        for(int i=row/3*3; i<row/3*3+3; i++) {
            for(int j=col/3*3; j<col/3*3+3; j++) {
                if(board[i][j]==c) return false;
            }
        }
        return true;
    }
}